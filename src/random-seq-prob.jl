#! /usr/bin/env julia
#
# Calculate the cummulative probability of matches for any sequence
# against a random digit sequence
#

using AccurateArithmetic
using ArgParse
using JSON
using LaTeXStrings
using Logging
using Plots
using ProgressBars

"""
Calculate the one-shot probabilty of a match for sequence of length n
in a random number of l digits
"""
function l_prob(; n = 3, l = 3, base = 10)
    if l < n
        return 1.0
    end
    (1.0 - float(base)^(-n))^(l - n + 1)
end

"""
Fill a vector with the probability at each l value
"""
function probability_seq(; n = 3, stop = 3, base = 10)
    prob_seq = Vector{Float64}()
    final_l = stop
    for l ∈ ProgressBar(1:stop)
        p = l_prob(n = n, l = l, base = base)
        push!(prob_seq, p)
        if p < eps(Float64)
            # There's just no point in going further than machine precision...
            @info "Abort at l=$(l), reached machine precision for cummulative calculation"
            final_l = l
            break
        end
    end
    prob_seq, final_l
end

"""
Calculate the cummulative probability from 1:l, ensuring accurate summation
using the AccurateArithmetic package
"""
function cummulative_prob_seq(prob_seq)
    L = length(prob_seq)
    cumm_prob_seq = zeros(Float64, L)
    for l ∈ ProgressBar(1:L)
        cumm_prob_seq[l] = sum_oro(prob_seq[1:l])
    end
    cumm_prob_seq
end

function parse_command_line(args)
    s = ArgParseSettings(autofix_names = true)
    @add_arg_table! s begin
        "--power"
        help = "Base power, used to correct probabilities by expected number of numbers of each length generated by p^n"
        arg_type = Int
        default = 2

        "--base"
        help = "Number base used for match probabilities"
        arg_type = Int
        default = 10

        "--stop"
        help = "Stop after numbers of this number of digits have been checked (will abort after machine precision)"
        arg_type = Int
        default = 10_000

        "--seq-length"
        help = "Sequence length calculate match probabilities"
        arg_type = Int
        default = 3

        "--info"
        help = "Print info level log messages"
        action = :store_true
    end
    return parse_args(args, s; as_symbols = true)
end

function main()
    args = parse_command_line(ARGS)
    if args[:info]
        logger = ConsoleLogger(stdout, Logging.Info)
    else
        logger = ConsoleLogger(stdout, Logging.Warn)
    end

    prob_seq, final_l = probability_seq(n = args[:seq_length], stop = args[:stop], base = args[:base])
    stats = @timed begin
        cumm_seq = cummulative_prob_seq(prob_seq)
    end
    @info "Cummulative non-match calculation took $(stats.time)s"

    println("Final probability for l=$(final_l) is $(prob_seq[end])")
    println("Final cummulative probability for l=$(final_l) is $(cumm_seq[end])")

    # Numerical results
    open(joinpath("results",
        "prob-seq-base-$(args[:base])-seq-$(args[:seq_length]).json"), write=true) do io
        JSON.print(io, prob_seq, 2)
    end

    ps_plot = plot(prob_seq, yaxis = :log, title = "Non-match probability for base $(args[:base])",
        xlabel = "Digit length", ylabel = L"$p$", label = "")
    savefig(ps_plot, joinpath("results", "prob-seq-base-$(args[:base])-seq-$(args[:seq_length]).pdf"))
    cs_plot = plot(cumm_seq,
        title = "Calculated number of sequence $(args[:seq_length])\nnon-matches for base $(args[:base])",
        xlabel = "Digit length", ylabel = "Cummulative non-matches", label = "")
    savefig(cs_plot, joinpath("results", "cumm-non-matches-base-$(args[:base])-seq-$(args[:seq_length]).pdf"))
end

main()
