#! /usr/bin/env julia
#
# Calculate the cummulative probability of matches for any sequence
# against a random digit sequence
#

using ArgParse
using Logging
using Plots
using ProgressBars

"""
Calculate the one-shot probabilty of a match for sequence of length n
in a random number of l digits
"""
function l_prob(;n=3, l=3)
    if l < n
        return 1.0
    end
    (1.0 - 10.0^(-n))^(l-n+1)
end

"""
Fill a vector with the probability at each l value
"""
function probability_seq(;n=3, stop=3)
    prob_seq = Vector{Float64}()
    for l ∈ ProgressBar(1:stop)
        push!(prob_seq, l_prob(n=n, l=l))
    end
    prob_seq
end

"""
Calculate the cummulative probability from 1:l, ensuring accurate summation
(here as the function is monotonic decreasing, this means sum in reverse)
"""
function cummulative_prob_seq(prob_seq)
    cumm_prob_seq = similar(prob_seq)
    L = length(prob_seq)
    for l ∈ ProgressBar(1:L)
        cumm_prob_seq[l] = 0.0
        for i = reverse(1:l)
            cumm_prob_seq[l] += prob_seq[i]
        end
    end
    cumm_prob_seq
end

function parse_command_line(args)
    s = ArgParseSettings(autofix_names = true)
    @add_arg_table! s begin
        "--power"
        help = "Base power, used to correct probabilities by expected number of numbers of each length generated by p^n"
        arg_type = Int
        default = 2

        "--base"
        help = "Number base used for match probabilities"
        arg_type = Int
        default = 10

        "--stop"
        help = "Stop after numbers of this number of digits have been checked"
        arg_type = Int
        default = 10_000

        "--seq-length"
        help = "Sequence length calculate match probabilities"
        arg_type = Int
        default = 3

        "--info"
        help = "Print info level log messages"
        action = :store_true
    end
    return parse_args(args, s; as_symbols = true)
end

function main()
    args = parse_command_line(ARGS)
    if args[:info]
        logger = ConsoleLogger(stdout, Logging.Info)
    else
        logger = ConsoleLogger(stdout, Logging.Warn)
    end

    prob_seq = probability_seq(n=args[:seq_length], stop=args[:stop])
    cumm_seq = cummulative_prob_seq(prob_seq)

    println("Final probability for l=args[:stop] is $(prob_seq[end])")
    println("Final cummulative probability for l=args[:stop] is $(cumm_seq[end])")

    ps_plot = plot(prob_seq, yaxis=:log)
    savefig(ps_plot, joinpath("prob-seq.pdf"))
    cs_plot = plot(cumm_seq)
    savefig(cs_plot, "cum-prob-seq.pdf")
end

main()
